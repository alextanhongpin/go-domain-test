// Code generated by mockery v2.32.0. DO NOT EDIT.

package usecase

import (
	context "context"

	domain "github.com/alextanhongpin/go-domain-test/domain"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockPurchaseRepository is an autogenerated mock type for the purchaseRepository type
type MockPurchaseRepository struct {
	mock.Mock
}

type MockPurchaseRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPurchaseRepository) EXPECT() *MockPurchaseRepository_Expecter {
	return &MockPurchaseRepository_Expecter{mock: &_m.Mock}
}

// CheckUserEligibility provides a mock function with given fields: ctx, userID
func (_m *MockPurchaseRepository) CheckUserEligibility(ctx context.Context, userID uuid.UUID) error {
	ret := _m.Called(ctx, userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPurchaseRepository_CheckUserEligibility_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckUserEligibility'
type MockPurchaseRepository_CheckUserEligibility_Call struct {
	*mock.Call
}

// CheckUserEligibility is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uuid.UUID
func (_e *MockPurchaseRepository_Expecter) CheckUserEligibility(ctx interface{}, userID interface{}) *MockPurchaseRepository_CheckUserEligibility_Call {
	return &MockPurchaseRepository_CheckUserEligibility_Call{Call: _e.mock.On("CheckUserEligibility", ctx, userID)}
}

func (_c *MockPurchaseRepository_CheckUserEligibility_Call) Run(run func(ctx context.Context, userID uuid.UUID)) *MockPurchaseRepository_CheckUserEligibility_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockPurchaseRepository_CheckUserEligibility_Call) Return(_a0 error) *MockPurchaseRepository_CheckUserEligibility_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPurchaseRepository_CheckUserEligibility_Call) RunAndReturn(run func(context.Context, uuid.UUID) error) *MockPurchaseRepository_CheckUserEligibility_Call {
	_c.Call.Return(run)
	return _c
}

// CreatePurchase provides a mock function with given fields: ctx, purchase
func (_m *MockPurchaseRepository) CreatePurchase(ctx context.Context, purchase domain.Purchase) error {
	ret := _m.Called(ctx, purchase)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Purchase) error); ok {
		r0 = rf(ctx, purchase)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPurchaseRepository_CreatePurchase_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePurchase'
type MockPurchaseRepository_CreatePurchase_Call struct {
	*mock.Call
}

// CreatePurchase is a helper method to define mock.On call
//   - ctx context.Context
//   - purchase domain.Purchase
func (_e *MockPurchaseRepository_Expecter) CreatePurchase(ctx interface{}, purchase interface{}) *MockPurchaseRepository_CreatePurchase_Call {
	return &MockPurchaseRepository_CreatePurchase_Call{Call: _e.mock.On("CreatePurchase", ctx, purchase)}
}

func (_c *MockPurchaseRepository_CreatePurchase_Call) Run(run func(ctx context.Context, purchase domain.Purchase)) *MockPurchaseRepository_CreatePurchase_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.Purchase))
	})
	return _c
}

func (_c *MockPurchaseRepository_CreatePurchase_Call) Return(_a0 error) *MockPurchaseRepository_CreatePurchase_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPurchaseRepository_CreatePurchase_Call) RunAndReturn(run func(context.Context, domain.Purchase) error) *MockPurchaseRepository_CreatePurchase_Call {
	_c.Call.Return(run)
	return _c
}

// FindProduct provides a mock function with given fields: ctx, productID
func (_m *MockPurchaseRepository) FindProduct(ctx context.Context, productID uuid.UUID) (*domain.Product, error) {
	ret := _m.Called(ctx, productID)

	var r0 *domain.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*domain.Product, error)); ok {
		return rf(ctx, productID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *domain.Product); ok {
		r0 = rf(ctx, productID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, productID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPurchaseRepository_FindProduct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindProduct'
type MockPurchaseRepository_FindProduct_Call struct {
	*mock.Call
}

// FindProduct is a helper method to define mock.On call
//   - ctx context.Context
//   - productID uuid.UUID
func (_e *MockPurchaseRepository_Expecter) FindProduct(ctx interface{}, productID interface{}) *MockPurchaseRepository_FindProduct_Call {
	return &MockPurchaseRepository_FindProduct_Call{Call: _e.mock.On("FindProduct", ctx, productID)}
}

func (_c *MockPurchaseRepository_FindProduct_Call) Run(run func(ctx context.Context, productID uuid.UUID)) *MockPurchaseRepository_FindProduct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockPurchaseRepository_FindProduct_Call) Return(_a0 *domain.Product, _a1 error) *MockPurchaseRepository_FindProduct_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPurchaseRepository_FindProduct_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*domain.Product, error)) *MockPurchaseRepository_FindProduct_Call {
	_c.Call.Return(run)
	return _c
}

// FindProductDiscount provides a mock function with given fields: ctx, productID
func (_m *MockPurchaseRepository) FindProductDiscount(ctx context.Context, productID uuid.UUID) ([]domain.Discount, error) {
	ret := _m.Called(ctx, productID)

	var r0 []domain.Discount
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]domain.Discount, error)); ok {
		return rf(ctx, productID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []domain.Discount); ok {
		r0 = rf(ctx, productID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Discount)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, productID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPurchaseRepository_FindProductDiscount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindProductDiscount'
type MockPurchaseRepository_FindProductDiscount_Call struct {
	*mock.Call
}

// FindProductDiscount is a helper method to define mock.On call
//   - ctx context.Context
//   - productID uuid.UUID
func (_e *MockPurchaseRepository_Expecter) FindProductDiscount(ctx interface{}, productID interface{}) *MockPurchaseRepository_FindProductDiscount_Call {
	return &MockPurchaseRepository_FindProductDiscount_Call{Call: _e.mock.On("FindProductDiscount", ctx, productID)}
}

func (_c *MockPurchaseRepository_FindProductDiscount_Call) Run(run func(ctx context.Context, productID uuid.UUID)) *MockPurchaseRepository_FindProductDiscount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockPurchaseRepository_FindProductDiscount_Call) Return(_a0 []domain.Discount, _a1 error) *MockPurchaseRepository_FindProductDiscount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPurchaseRepository_FindProductDiscount_Call) RunAndReturn(run func(context.Context, uuid.UUID) ([]domain.Discount, error)) *MockPurchaseRepository_FindProductDiscount_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPurchaseRepository creates a new instance of MockPurchaseRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPurchaseRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPurchaseRepository {
	mock := &MockPurchaseRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
