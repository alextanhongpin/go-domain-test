// Code generated by mockery v2.32.0. DO NOT EDIT.

package usecase

import (
	context "context"

	domain "github.com/alextanhongpin/go-domain-test/domain"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockProductRepository is an autogenerated mock type for the productRepository type
type MockProductRepository struct {
	mock.Mock
}

type MockProductRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProductRepository) EXPECT() *MockProductRepository_Expecter {
	return &MockProductRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, name, userID
func (_m *MockProductRepository) Create(ctx context.Context, name string, userID uuid.UUID) (*domain.Product, error) {
	ret := _m.Called(ctx, name, userID)

	var r0 *domain.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, uuid.UUID) (*domain.Product, error)); ok {
		return rf(ctx, name, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, uuid.UUID) *domain.Product); ok {
		r0 = rf(ctx, name, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, uuid.UUID) error); ok {
		r1 = rf(ctx, name, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProductRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockProductRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - userID uuid.UUID
func (_e *MockProductRepository_Expecter) Create(ctx interface{}, name interface{}, userID interface{}) *MockProductRepository_Create_Call {
	return &MockProductRepository_Create_Call{Call: _e.mock.On("Create", ctx, name, userID)}
}

func (_c *MockProductRepository_Create_Call) Run(run func(ctx context.Context, name string, userID uuid.UUID)) *MockProductRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(uuid.UUID))
	})
	return _c
}

func (_c *MockProductRepository_Create_Call) Return(_a0 *domain.Product, _a1 error) *MockProductRepository_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProductRepository_Create_Call) RunAndReturn(run func(context.Context, string, uuid.UUID) (*domain.Product, error)) *MockProductRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, id
func (_m *MockProductRepository) Delete(ctx context.Context, id uuid.UUID) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockProductRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockProductRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockProductRepository_Expecter) Delete(ctx interface{}, id interface{}) *MockProductRepository_Delete_Call {
	return &MockProductRepository_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *MockProductRepository_Delete_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockProductRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockProductRepository_Delete_Call) Return(_a0 error) *MockProductRepository_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProductRepository_Delete_Call) RunAndReturn(run func(context.Context, uuid.UUID) error) *MockProductRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// FindByID provides a mock function with given fields: ctx, id
func (_m *MockProductRepository) FindByID(ctx context.Context, id uuid.UUID) (*domain.Product, error) {
	ret := _m.Called(ctx, id)

	var r0 *domain.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*domain.Product, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *domain.Product); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProductRepository_FindByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByID'
type MockProductRepository_FindByID_Call struct {
	*mock.Call
}

// FindByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockProductRepository_Expecter) FindByID(ctx interface{}, id interface{}) *MockProductRepository_FindByID_Call {
	return &MockProductRepository_FindByID_Call{Call: _e.mock.On("FindByID", ctx, id)}
}

func (_c *MockProductRepository_FindByID_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockProductRepository_FindByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockProductRepository_FindByID_Call) Return(_a0 *domain.Product, _a1 error) *MockProductRepository_FindByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProductRepository_FindByID_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*domain.Product, error)) *MockProductRepository_FindByID_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockProductRepository creates a new instance of MockProductRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProductRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProductRepository {
	mock := &MockProductRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
